Shawn Thompson
CSC 207
Dr. Almeida
Project #2


Part 1:

Base Case: 
SumOdd(N) = 1 If N > 0

Non-Recursive Case: 
SumOdd(N) = 1 + 3 + ... + ((2 * N) - 1) + N

Recursive Case:
SumOdd(N)     = 1 + 3 + ... + ((2 * N) - 1) + N
SumOdd(N - 1) = 1 + 3 + ... + ((2 * N) - 1)

Base Case: 
sumlist(LS) = 0 if '()

Non-Recursive Case: 
sumlist(LS)     = add cdr LS to each other until

Recursive Case:
sumlist(LS)     = 1 + 3 + ... + ((2 * N) - 1) + N
sumlist(LS - 1) = 1 + 3 + ... + ((2 * N) - 1)

Base Case:
getNth(N LS) = If N = 1 return car LS

Non-Recursive Case:
getNth(N LS) = Take the cdr of the list until N is equal to 1 then return (car LS)

Recursive Case:
getNth(N LS) = Take the cdr of the list until N is equal to 1 then return (car LS)
getNth((N -1) LS) = (getNth (- N 1) (cdr LS))


Part 2:

(define SumOdd
  (lambda (N)
    (if (= N 1) 1
        (+ (SumOdd (- N 1)) (- (* 2 N) 1) ))))

(define sumlist
    (lambda (ls)
    (cond
      ((null? ls)
       0)
      ((pair? (car ls))
       (+ (sumlist(car ls)) (sumlist(cdr ls))))
      (else
       (+ (car ls) (sumlist (cdr ls)))))))

(define getNth
  (lambda (N LS)
    (if (eq? N 1) (car LS)
        (getNth (- N 1) (cdr LS)))))

> (sumOdd 1)
1
> (sumOdd 4)
16
> (sumOdd 5)
25
> (sumlist '())
0
> (sumlist '(4))
4
> (sumlist '(2 4 1 7 3))
17
> (getNth 4 '())
()
> (getNth 0 '(a b c))
a
> (getNth 3 '(a b c))
. . car: expects argument of type <pair>; given ()
> (getNth 3 '(a b c d e))
d
> 

