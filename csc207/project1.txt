Welcome to DrScheme, version 4.1 [3m].
Language: Essentials of Programming Languages (3rd ed.); memory limit: 128 megabytes.
> (define delete-second1(lambda (x) append (car(x)) (cdr(cdr(x)))))
> (delete-second1 ‘(3 7))
. . reference to undefined identifier: ‘
> (define delete-second1(lambda (x) append (car(x)) (cdr(cdr(x)))))
> (delete-second1 '(3 7))
. . procedure application: expected procedure, given: (3 7) (no arguments)
> (define delete-second1(lambda (x) append (car x) (cdr(cdr x))))
> (delete-second1 '(3 7))
()
> (define delete-second1(lambda (x) (append (car x) (cdr(cdr x)))))
> (delete-second1 '(3 7))
. . append: expected argument of type <proper list>; given 3
> (define delete-second1(lambda (x) cons (car x) (cdr(cdr x))))
> (delete-second1 '(3 7))
()
> (define delete-second1(lambda (x) cons (car x) (cdr x)))
> (delete-second1 '(3 7))
(7)
> (define delete-second1(lambda (x) cons (car x) '()))
> (delete-second1 '(3 7))
()
> (define delete-second1(lambda (x) (car x)))
> (delete-second1 '(3 7))
3
> (define delete-second1(lambda (x) (cons (car x) '())))
> (delete-second1 '(3 7))
(3)
> (define delete-second1(lambda (x) (cons (car x) (cdr(cdr x)))))
> (delete-second1 '(3 7))
(3)
> (delete-second1 ‘(a b c d))
. . reference to undefined identifier: ‘
> (delete-second1 '(a b c d))
(a c d)
> (define delete-second2
    (lambda (x)
      (cond
        (and (not (null? x))(not (null? (cdr x))))cons (car x) (cdr(cdr x)))
        (else '())))
. cond: bad syntax (clause is not a test-value pair) in: cons
> (define delete-second2
    (lambda (x)
      (cond
        (and (not (null? x))(not (null? (cdr x))))(cons (car x) (cdr(cdr x)))
        (else '()))))
. and: bad syntax in: and
> (define delete-second2
    (lambda (x)
      (cond
        (and (not (null? x))(not (null? (cdr x))))(cons (car x) (cdr(cdr x))))
        (else '())))
. and: bad syntax in: and
> (define delete-second2 (lambda (x) (and (not (null? x))(not (null? (cdr x)))) (second-delete1 x) '()))
> (delete-second2 '())
. . reference to undefined identifier: second-delete1
> (define delete-second2 (lambda (x) (and (not (null? x))(not (null? (cdr x)))) (delete-second1 x) '()))
> (delete-second2 '())
. . car: expects argument of type <pair>; given ()
> (define delete-second2 (lambda (x) (if (and (not (null? x))(not (null? (cdr x)))) (delete-second1 x) '())))
> (delete-second2 '())
()
> (delete-second2 '(3))
()
> (delete-second2 '(3 7))
(3)
> (define delete-second2 (lambda (x) (if (not (null? x)) (delete-second1 x) '())))
> (delete-second2 '())
()
> (delete-second2 '(3))
. . cdr: expects argument of type <pair>; given ()
> (define delete-second2 (lambda (x) (if (and (not (null? x))(not (null? (cdr x)))) (delete-second1 x) x)))
> (delete-second2 '(3))
(3)
> (delete-second2 '())
()
> (delete-second2 '(3 7))
(3)
> (delete-second2 '(a b c d))
(a c d)
> (define switch-one-and-two (lambda (x) (if (and (not (null? x))(not (null? (cdr x)))) (cons (cdr x) (car x)) x)))
> (switch-one-and-two '(a b))
((b) . a)
> (define switch-one-and-two (lambda (x) (if (and (not (null? x))(not (null? (cdr x)))) (cons (car (cdr x)) (car x)) x)))
> (switch-one-and-two '(a b))
(b . a)
> (define switch-one-and-two (lambda (x) (if (and (not (null? x))(not (null? (cdr x)))) (cons (car (cdr x)) (cdr (cdr x)) x))))
> (switch-one-and-two '(a b))
. . cons: expects 2 arguments, given 3: b () (a b)
> (define switch-one-and-two (lambda (x) (if (and (not (null? x))(not (null? (cdr x)))) (cons (car (cdr x)) (cdr (cdr x))) x)))
> (switch-one-and-two '(a b))
(b)
> (define switch-one-and-two (lambda (x) (if (and (not (null? x))(not (null? (cdr x)))) (cons (car (cdr x)) x) x)))
> (switch-one-and-two '(a b))
(b a b)
> (define switch-one-and-two (lambda (x) (if (and (not (null? x))(not (null? (cdr x)))) (cons (car (cdr x)) (cons (car x) (cdr (cdr x)))) x)))
> (switch-one-and-two '(a b))
(b a)
> (switch-one-and-two '(a))
(a)
> (switch-one-and-two '(a b c d))
(b a c d)
> (define put-first-last (lambda (L) (if (and (not (null? x))(not (null? (cdr x)))) (cons (car x) (cdr x)) x)))
> (put-first-in-last '())
. . reference to undefined identifier: put-first-in-last
> (put-first-last '())
. . reference to undefined identifier: x
> (define put-first-last (lambda (L) (if (and (not (null? L))(not (null? (cdr L)))) (cons (car L) (cdr L)) L)))
> (put-first-last '())
()
> (put-first-last '(a))
(a)
> (put-first-last '(a b))
(a b)
> (define put-first-last (lambda (L) (if (and (not (null? L))(not (null? (cdr L)))) (car L) L)))
> (put-first-last '(a b))
a
> (define put-first-last (lambda (L) (if (and (not (null? L))(not (null? (cdr L)))) (cons (car L) (cdr L) L))))
> (put-first-last '(a b))
. . cons: expects 2 arguments, given 3: a (b) (a b)
> (define put-first-last (lambda (L) (if (and (not (null? L))(not (null? (cdr L)))) (cons (car L) (cdr L)) L)))
> (put-first-last '(a b))
(a b)
> (define put-first-last (lambda (L) (if (and (not (null? L))(not (null? (cdr L)))) (cdr L) L)))
> (put-first-last '(a b))
(b)
> (define put-first-last (lambda (L) (if (and (not (null? L))(not (null? (cdr L)))) (cons (cdr L) (car L)) L)))
> (put-first-last '(a b))
((b) . a)
> (define put-first-last (lambda (L) (if (and (not (null? L))(not (null? (cdr L))))  L)))